<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qin Yuan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-31T14:01:54.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Qin Yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017小结</title>
    <link href="http://yoursite.com/2017/12/30/2017%E5%B9%B4%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2017/12/30/2017年小结/</id>
    <published>2017-12-30T12:39:02.000Z</published>
    <updated>2017-12-31T14:01:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;之前没有如此强烈的想写年终的总结的冲动，但是今年经历了太多的事情，不如就此回顾一下2017在展望一下2018吧。</p>
<a id="more"></a>
<h2 id="毕业"><a href="#毕业" class="headerlink" title="毕业"></a>毕业</h2><p>&emsp;&emsp;今年六月终于从广东某不知名的一所学校毕业了，说终于倒不是因为不喜欢读书，大学四年的时间真是我这么多年来度过的最开心快乐充实的时光，现在看到朋友圈的师弟师妹发在学校的生活还不经回想起当年的时光，泡在实验室或者是图书馆搞自己喜欢的东西，顺带着晚上跑个外环，简直开心的不行。</p>
<p>&emsp;&emsp;至于学校的那些课程么~自然是划划水了，其实现在工作以后觉得还是有几门课需要认真学的，毕竟以后用的着而且还蛮有意思的，只不过当时觉得一帮念PPT的教不出个所以然来。</p>
<p>&emsp;&emsp;毕业也还顺利，拿到手一看读了四年是一个管理学学位，不过也蛮有意思的，高中文科生，大学管理学学士，毕业去搞计算机啦，按我老爸的话说就是能折腾，年轻。从读书到实习都能折腾，实习的折腾后面在说吧，先聊毕业的事。</p>
<p>&emsp;&emsp;拍毕业照的时候也没什么值得留恋的东西，就和班里人集体例行公事的拍了一下，中间的时间都拉着佳婷拍了，和佳婷坐湖边好好聊了一会，也错过了几次集体的合照，本来也无所谓，我这人在班上也没有什么存在感，照片里少了也没几个人会注意到的，和佳婷聊聊人生谈谈理想，虽然追了挺久也没追到但是这事就翻篇了，大学也就这么糊弄过去了。</p>
<h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>&emsp;&emsp;先说实习吧，实习这事跨度太大，16年到17年，大三的时候去阿里音乐见识了见识外面的世界，学到了点人生经验，当然也得写写代码换点钱花花，学到了不少开阔了眼界，知道了外面的公司前端是怎么开发的流程是什么样的，当然也暴露了测试的时候没见过那么多的不同牌子的手机，自然测试完我都是要借来摸一遍的。</p>
<p>&emsp;&emsp;大四的时候闲来无事就又跑去UC实习了，第一次感受到了被切图支配的恐惧（笑:-D) ~  RED部门里设计为主，前端的主要工作就把设计用CSS高度还原以后分装成模块在给另一个前端组实习交互逻辑，当然说的专业点就是前端重构工程师了，大厂流程很规范加班也不少，只是觉得有点枯燥大多都是流程化的操作，一两遍还行你要说天天搞这个我也是不开心，踏实做也能做出点东西，可是还是不太喜欢就跑路喽。</p>
<p>&emsp;&emsp;后来就这么奇奇怪怪的在年初的时候来了北京，当时是投的Node.Js来的SenseTime，结果来了以后转型后端工程师写起了ruby，等适应以后觉得ruby还是蛮有意思，给社区翻译了一些文档，还试着把Libuv移植到Ruby写一个web服务器结合了一些Puma的代码，自娱自乐倒也很是开心。</p>
<p><img src="https://raw.githubusercontent.com/Ice-Storm/ice-storm.github.io/master/images/2017review/WechatIMG43.jpeg" alt=""></p>
<p>&emsp;&emsp;转正以后就慢慢参与公有云管理后台的开发，同事离职以后就全部负责起了这个项目，第一次维护开发一个逻辑很复杂的项目自然是非常开心，学到了不少东西也让我见识真正上线服务很多客户的云是怎么回事，整个管理后台不算前端大概两三万行rails的代码逻辑非常的复杂，集成了各种子系统真是Debug到飞起，现在玩的比较溜以后又可以研究研究其他好玩的东西啦。</p>
<p>&emsp;&emsp;其他的就是看看ML啊，学习学习计算机组成，折腾一下Golang，玩玩docker，rancher什么的乐在其中。</p>
<h3 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h3><p>&emsp;&emsp;说旅行有点牵强，但又实实在在的去了很多的地方，湛江，广州，酒泉，北京，天津，苏州，杭州还有一些记不得地方了，去这些地方多多少少都带着点目的，不是单单纯纯的去玩，除去回酒泉也就是家的那次吧。<br>&emsp;&emsp;飘的地方多了反而想安稳一点了，在苏州的女票又总是抱怨我居无定所，算不上流浪法师但至少是够得上流浪码农了，<code>如果有大佬看到这公司在江浙一带又恰好缺一个写代码的，或者需要一个只存在在线上的码农不妨联系我</code>。</p>
<p><img src="https://raw.githubusercontent.com/Ice-Storm/ice-storm.github.io/master/images/2017review/WechatIMG46.jpeg" alt=""><br><img src="https://raw.githubusercontent.com/Ice-Storm/ice-storm.github.io/master/images/2017review/WechatIMG44.jpeg" alt=""><br><img src="https://raw.githubusercontent.com/Ice-Storm/ice-storm.github.io/master/images/2017review/WechatIMG45.jpeg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/Ice-Storm/ice-storm.github.io/master/images/2017review/WechatIMG47.jpeg" alt=""><br><img src="https://raw.githubusercontent.com/Ice-Storm/ice-storm.github.io/master/images/2017review/WechatIMG48.jpeg" alt=""></p>
<h3 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h3><p>砥砺前行~</p>
<ul>
<li>深入学习一下Go语言，并且在项目里实践</li>
<li>Docker，Rancher深入学习</li>
<li>把Github的坑填完</li>
<li>初探ML，毕竟公司有大神指导 :-D</li>
<li>明确一下以后发展的方向，技术和生活两方面</li>
<li>尤克里里在溜一点，生活气在多一点，就这样吧~</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;之前没有如此强烈的想写年终的总结的冲动，但是今年经历了太多的事情，不如就此回顾一下2017在展望一下2018吧。&lt;/p&gt;
    
    </summary>
    
      <category term="review2017" scheme="http://yoursite.com/categories/review2017/"/>
    
    
      <category term="review2017" scheme="http://yoursite.com/tags/review2017/"/>
    
  </entry>
  
  <entry>
    <title>浅析Node的nextTick</title>
    <link href="http://yoursite.com/2017/07/22/%E6%B5%85%E6%9E%90Node%E7%9A%84nextTick/"/>
    <id>http://yoursite.com/2017/07/22/浅析Node的nextTick/</id>
    <published>2017-07-22T06:48:29.000Z</published>
    <updated>2017-07-22T12:52:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>看thinkjs源码的时候发现下面这段代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cluster.on(<span class="string">'exit'</span>, worker =&gt; &#123;</div><div class="line">  think.log(<span class="keyword">new</span> <span class="built_in">Error</span>(think.locale(<span class="string">'WORKER_DIED'</span>, worker.process.pid)), <span class="string">'THINK'</span>);</div><div class="line">  process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> cluster.fork());</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>  这段代码的意思很简单，就是cluster挂了以后重新fork一个。<br>  但是注意到其中的<code>process.nextTick(() =&gt; cluster.fork());</code>这行，刚开始想了一下没有理解为什么不直接<code>fork</code>，后面仔细想了一下，发现如果直接<code>fork</code>，在<code>fork</code>的过程中又出现错误导致进程退出，而<code>cluster</code>又监听到<code>exit</code>的事件，就会不断的重复这个过程，阻塞Node进程。<br>  如果使用<code>process.nextTick(() =&gt; cluster.fork());</code>则不会阻塞Node的事件循环，只会在<code>Event Loop</code>的<code>close callbacks</code>阶段执行<code>fork</code>，即使程序一直<code>fork</code>失败也不会导致程序假死。(如果有疑问可以阅读文章末的扩展阅读)。<br>  下面的Demo说明了为什么使用了<code>nextTick</code>不会导致程序假死。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter; </div><div class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> EventEmitter();</div><div class="line"></div><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</div><div class="line"></div><div class="line">event.on(<span class="string">'some_event'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">  count++;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'some_event 事件触发'</span> + count);</div><div class="line">  <span class="keyword">if</span> (count &lt; num) &#123;</div><div class="line">    event.emit(<span class="string">'some_event'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">event.emit(<span class="string">'some_event'</span>); </div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'what ?'</span>)</div></pre></td></tr></table></figure></p>
<p>运行这段代码就会输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">some_event 事件触发1</div><div class="line">some_event 事件触发2</div><div class="line">some_event 事件触发3</div><div class="line">some_event 事件触发4</div><div class="line">some_event 事件触发5</div><div class="line">some_event 事件触发6</div><div class="line">some_event 事件触发7</div><div class="line">some_event 事件触发8</div><div class="line">some_event 事件触发9</div><div class="line">some_event 事件触发10</div><div class="line">what ?</div></pre></td></tr></table></figure></p>
<p>  可以发现 <code>what ?</code> 在最后才输出。如果把num设置的非常大就会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">internal/process/next_tick.js:148</div><div class="line">    nextTickQueue.push(&#123;</div><div class="line">                 ^</div><div class="line">RangeError: Maximum call stack size exceeded</div></pre></td></tr></table></figure></p>
<p>  V8不断的向事件队列里添加任务，最终导致出现溢出，把<code>event.emit(&#39;some_event&#39;)</code>改写成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  event.emit(<span class="string">'some_event'</span>) </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>  就会发现输出成了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ome_event 事件触发1</div><div class="line">what ?</div><div class="line">some_event 事件触发2</div><div class="line">some_event 事件触发3</div><div class="line">some_event 事件触发4</div><div class="line">some_event 事件触发5</div><div class="line">some_event 事件触发6</div><div class="line">some_event 事件触发7</div><div class="line">some_event 事件触发8</div><div class="line">some_event 事件触发9</div><div class="line">some_event 事件触发10</div></pre></td></tr></table></figure></p>
<p>  <code>what ?</code>并不会被阻塞，而且无论<code>num</code>改成多少，都不会出现栈溢出的错误。<br>  Node的<code>Event loop</code>执行流程如图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">   ┌───────────────────────┐</div><div class="line">┌─&gt;│        timers         │</div><div class="line">│  └──────────┬────────────┘</div><div class="line">|      nextTick（队列执行）</div><div class="line">│  ┌──────────┴────────────┐</div><div class="line">│  │     I/O callbacks     │</div><div class="line">│  └──────────┬────────────┘</div><div class="line">|       nextTick（队列执行）</div><div class="line">│  ┌──────────┴────────────┐</div><div class="line">│  │     idle, prepare     │</div><div class="line">│  └──────────┬────────────┘      </div><div class="line">|      nextTick（队列执行）         ┌───────────────┐</div><div class="line">│  ┌──────────┴────────────┐      │   incoming:   │</div><div class="line">│  │         poll          │&lt;─────┤  connections, │</div><div class="line">│  └──────────┬────────────┘      |               |</div><div class="line">|      nextTick（队列执行）         │   data, etc.  │</div><div class="line">│  ┌──────────┴────────────┐      └───────────────┘</div><div class="line">│  │        check          │</div><div class="line">│  └──────────┬────────────┘</div><div class="line">|       nextTick（队列执行）</div><div class="line">│  ┌──────────┴────────────┐</div><div class="line">└──┤    close callbacks    │</div><div class="line">   └───────────────────────┘</div></pre></td></tr></table></figure></p>
<p>  直接<code>event.emit(&#39;some_event&#39;)</code>的时候，Node不断的把收集到的事件塞到<code>I/O callbacks</code>这个队列，如果有大量的事件塞入就会最终导致溢出，就是上面的<code>Maximum call stack size exceeded</code>错误。<br>  如果加了<code>process.nextTick</code>则会不断的把<code>emit</code>的事件回调加到<code>nextTickQueue</code>队列，在各个主队列切换的时候执行，见上图的 <code>nextTick（队列执行）</code>。上面的那段Demo把<code>event.emit(&#39;some_event&#39;)</code>修改后的执行顺序就是<br>  1、发送事件<br>  2、把事件回调函数添加到<code>nextTickQueue</code>(注意，这个时候<code>nextTickQueue</code>队列里只有一个事件回调函数，如果当前队列尚未执行完毕并且没有发生切换，则<code>nextTickQueue</code>队列里的事件永远不会执行)<br>  3、执行<code>nextTickQueue</code>里的第一个事件回调(当前队列执行完毕或者执行到一定数量发生切换时，事件回调又会重新创建一个新的<code>nextTickQueue</code>队列并添加一个事件回调)<br>  4、然后同上<br>  这样就没有阻塞Node的事件循环，无论num多大都不会撑爆<code>I/O callbacks</code>队列。其实最核心的思想就是将任务拆解到若干次事件循环中，逐步执行。</p>
<p>扩展阅读<br>  <a href="https://github.com/creeperyang/blog/issues/26" target="_blank" rel="external">Node.js的event loop及timer/setImmediate/nextTick</a><br>  <a href="http://www.cnblogs.com/bingooo/p/6720540.html" target="_blank" rel="external">Node.js 原理简介</a><br>  <a href="https://yjhjstz.gitbooks.io/deep-into-node/content/" target="_blank" rel="external">深入理解Node.js：核心思想与源码分析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看thinkjs源码的时候发现下面这段代码。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cluster.on(&lt;span class=&quot;string&quot;&gt;&#39;exit&#39;&lt;/span&gt;, worker =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  think.log(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(think.locale(&lt;span class=&quot;string&quot;&gt;&#39;WORKER_DIED&#39;&lt;/span&gt;, worker.process.pid)), &lt;span class=&quot;string&quot;&gt;&#39;THINK&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  process.nextTick(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; cluster.fork());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="http://yoursite.com/categories/Node/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/Node/JavaScript/"/>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Sinatra扩展机制</title>
    <link href="http://yoursite.com/2017/07/22/Sinatra%E6%89%A9%E5%B1%95%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2017/07/22/Sinatra扩展机制/</id>
    <published>2017-07-21T16:43:19.000Z</published>
    <updated>2017-07-22T12:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sinatra通过<code>helpers</code>和<code>register</code>函数进行扩展<br>首先看一下<code>helpers</code>函数，用来是来扩展Base类的实例方法。</p>
<a id="more"></a>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">helpers</span><span class="params">(*extensions, &amp;block)</span></span></div><div class="line">  class_eval(&amp;block)   <span class="keyword">if</span> block_given?</div><div class="line">  <span class="keyword">include</span>(*extensions) <span class="keyword">if</span> extensions.any?</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>在看一下<code>register</code>函数,用来扩展Base类的类方法<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(*extensions, &amp;block)</span></span></div><div class="line">  extensions &lt;&lt; Module.new(&amp;block) <span class="keyword">if</span> block_given?</div><div class="line">  @extensions += extensions</div><div class="line">  extensions.each <span class="keyword">do</span> <span class="params">|extension|</span></div><div class="line">    extend extension</div><div class="line">    extension.registered(<span class="keyword">self</span>) <span class="keyword">if</span> extension.respond_to?(<span class="symbol">:registered</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>两个方法都支持通过代码块扩展，也支持通过Module来扩展。</p>
<p>两种扩展方法对应Sinatra的两种编程风格。</p>
<p>Sinatra编程的两种风格:</p>
<p>经典风格:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span><span class="string">'sinatra'</span></div><div class="line"></div><div class="line">get <span class="string">'/'</span> <span class="keyword">do</span></div><div class="line">  <span class="string">"hello world"</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>模块化风格:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span><span class="string">'sinatra/base'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> &lt; Sinatra::Base</span></div><div class="line"></div><div class="line">  get <span class="string">"/"</span> <span class="keyword">do</span></div><div class="line">    <span class="string">"hello world"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  run!</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>为两种风格编写扩展:</p>
<p>Sinatra扩展也分为两种:</p>
<p>helper 型<br>dsl 型</p>
<p>helper型:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'sinatra/base'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Sinatra</span></span></div><div class="line">  <span class="class"><span class="keyword">module</span> <span class="title">FormatHelper</span></span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">escape_html</span><span class="params">(text)</span></span></div><div class="line">      Rack::Utils.escape_html(text)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  helpers FormatHelper </div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>classic style 使用extension</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'sinatra'</span></div><div class="line"></div><div class="line">get <span class="string">'/'</span> <span class="keyword">do</span></div><div class="line">  escape_html(<span class="string">"x &gt; y"</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>modular style 使用extension</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'sinatra/base'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> &lt; Sinatra::Base</span></div><div class="line"></div><div class="line">  helpers Sinatra::FormatHelper</div><div class="line"></div><div class="line">  get <span class="string">'/'</span> <span class="keyword">do</span></div><div class="line">    escape_html(<span class="string">"x &gt; y"</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  run!</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这里的<code>helpers</code>其实相当于<code>include</code></p>
<p>dsl型:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'sinatra/base'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Sinatra</span></span></div><div class="line">  <span class="class"><span class="keyword">module</span> <span class="title">Devise</span></span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate!</span></span></div><div class="line">      before &#123;</div><div class="line">        halt <span class="number">403</span>, <span class="string">"You Bastards!"</span></div><div class="line">      &#125;</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  register Devise</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>classic style 使用 dsl extension</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'sinatra'</span></div><div class="line"></div><div class="line">authenticate!</div><div class="line"></div><div class="line">get <span class="string">'/'</span> <span class="keyword">do</span></div><div class="line">  escape_html(<span class="string">"x &gt; y"</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>modular style 使用 dsl extension</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'sinatra/base'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> &lt; Sinatra::Base</span></div><div class="line">  register Sinatra::Devise</div><div class="line"></div><div class="line">  authenticate!</div><div class="line"></div><div class="line">  get <span class="string">'/'</span> <span class="keyword">do</span></div><div class="line">    <span class="string">"hello world"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  run!</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>上面就是两种扩展的用法，我们在深入一点</p>
<p>在<code>Sinatra/main</code>的最后几行可以看到<code>extend Sinatra::Delegator</code>，其实当 <code>require &#39;sinatra&#39;</code>的时候就是执行的上面那行代码，作为整个Sinatra的入口。</p>
<p>看一下<code>Delegator</code>模块,默认的target是<code>Application</code>,也就是<code>helpers</code>和<code>register</code>等Sinatra的一干关键字<code>get post ...</code>等都是通过动态派发给<code>Application</code>类执行的。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Delegator</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">delegate</span><span class="params">(*methods)</span></span></div><div class="line">    methods.each <span class="keyword">do</span> <span class="params">|method_name|</span></div><div class="line">      define_method(method_name) <span class="keyword">do</span> <span class="params">|*args, &amp;block|</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>(*args, &amp;block) <span class="keyword">if</span> respond_to? method_name</div><div class="line">        Delegator.target.send(method_name, *args, &amp;block)</div><div class="line">      <span class="keyword">end</span></div><div class="line">      private method_name</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  delegate <span class="symbol">:get</span>, <span class="symbol">:patch</span>, <span class="symbol">:put</span>, <span class="symbol">:post</span>, <span class="symbol">:delete</span>, <span class="symbol">:head</span>, <span class="symbol">:options</span>, <span class="symbol">:link</span>, <span class="symbol">:unlink</span>,</div><div class="line">           <span class="symbol">:template</span>, <span class="symbol">:layout</span>, <span class="symbol">:before</span>, <span class="symbol">:after</span>, <span class="symbol">:error</span>, <span class="symbol">:not_found</span>, <span class="symbol">:configure</span>,</div><div class="line">           <span class="symbol">:set</span>, <span class="symbol">:mime_type</span>, <span class="symbol">:enable</span>, <span class="symbol">:disable</span>, <span class="symbol">:use</span>, <span class="symbol">:development?</span>, <span class="symbol">:test?</span>,</div><div class="line">           <span class="symbol">:production?</span>, <span class="symbol">:helpers</span>, <span class="symbol">:settings</span>, <span class="symbol">:register</span></div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></div><div class="line">    <span class="keyword">attr_accessor</span> <span class="symbol">:target</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="keyword">self</span>.target = Application</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p><code>Delegator</code>模块功能就是定义派发给<code>Application</code>的函数（不管实现，只是转发）</p>
<p>整个通过<code>Delegator.delegate</code>注册的方法的实现都在<code>Helper</code>这个模块里，在<code>Base</code>类里<code>include</code>各种方法的实现，然后<code>Application</code>在继承<code>Base</code>,有点绕~。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></div><div class="line">  <span class="keyword">include</span> Rack::Utils</div><div class="line">  <span class="keyword">include</span> Helpers</div><div class="line">  <span class="keyword">include</span> Templates</div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>通过一张图理清楚他们的关系</p>
<p><img src="https://l.ruby-china.org/photo/2017/767a092d-c6a4-43df-aee0-c20109525e34.jpeg!large" alt=""></p>
<p>定义自己的关键字，像<code>get post</code>这样。</p>
<p>扩展方法首先在<code>Delegator</code>模块调用<code>delegate</code>方法的时候添加你扩展的关键字名称，类似<code>delegate :get, :patch, ... , :my_fun</code>, 然后在<code>Helper</code>模块里定义<code>my_fun</code>的实现<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Helpers</span></span></div><div class="line">  my_fun</div><div class="line">    p <span class="string">"my_fun"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>这样就可以像关键字一样使用my_fun了，当然也可以通过上面介绍的两个方法进行扩展。</p>
<p>参考  <a href="http://saito.im/note/Sinatra-Extensions/" target="_blank" rel="external">http://saito.im/note/Sinatra-Extensions/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sinatra通过&lt;code&gt;helpers&lt;/code&gt;和&lt;code&gt;register&lt;/code&gt;函数进行扩展&lt;br&gt;首先看一下&lt;code&gt;helpers&lt;/code&gt;函数，用来是来扩展Base类的实例方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Ruby" scheme="http://yoursite.com/categories/Ruby/"/>
    
      <category term="Sinatra" scheme="http://yoursite.com/categories/Ruby/Sinatra/"/>
    
    
      <category term="Ruby" scheme="http://yoursite.com/tags/Ruby/"/>
    
      <category term="Sinatra" scheme="http://yoursite.com/tags/Sinatra/"/>
    
  </entry>
  
</feed>
