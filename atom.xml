<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qin Yuan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-22T06:08:04.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Qin Yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sinatra扩展机制</title>
    <link href="http://yoursite.com/2017/07/22/Sinatra%E6%89%A9%E5%B1%95%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2017/07/22/Sinatra扩展机制/</id>
    <published>2017-07-21T16:43:19.000Z</published>
    <updated>2017-07-22T06:08:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sinatra通过<code>helpers</code>和<code>register</code>函数进行扩展<br>首先看一下<code>helpers</code>函数，用来是来扩展Base类的实例方法。</p>
<a id="more"></a>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">helpers</span><span class="params">(*extensions, &amp;block)</span></span></div><div class="line">  class_eval(&amp;block)   <span class="keyword">if</span> block_given?</div><div class="line">  <span class="keyword">include</span>(*extensions) <span class="keyword">if</span> extensions.any?</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>在看一下<code>register</code>函数,用来扩展Base类的类方法<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(*extensions, &amp;block)</span></span></div><div class="line">  extensions &lt;&lt; Module.new(&amp;block) <span class="keyword">if</span> block_given?</div><div class="line">  @extensions += extensions</div><div class="line">  extensions.each <span class="keyword">do</span> <span class="params">|extension|</span></div><div class="line">    extend extension</div><div class="line">    extension.registered(<span class="keyword">self</span>) <span class="keyword">if</span> extension.respond_to?(<span class="symbol">:registered</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>两个方法都支持通过代码块扩展，也支持通过Module来扩展。</p>
<p>两种扩展方法对应Sinatra的两种编程风格。</p>
<p>Sinatra编程的两种风格:</p>
<p>经典风格:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span><span class="string">'sinatra'</span></div><div class="line"></div><div class="line">get <span class="string">'/'</span> <span class="keyword">do</span></div><div class="line">  <span class="string">"hello world"</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>模块化风格:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span><span class="string">'sinatra/base'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> &lt; Sinatra::Base</span></div><div class="line"></div><div class="line">  get <span class="string">"/"</span> <span class="keyword">do</span></div><div class="line">    <span class="string">"hello world"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  run!</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>为两种风格编写扩展:</p>
<p>Sinatra扩展也分为两种:</p>
<p>helper 型<br>dsl 型</p>
<p>helper型:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'sinatra/base'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Sinatra</span></span></div><div class="line">  <span class="class"><span class="keyword">module</span> <span class="title">FormatHelper</span></span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">escape_html</span><span class="params">(text)</span></span></div><div class="line">      Rack::Utils.escape_html(text)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  helpers FormatHelper </div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>classic style 使用extension</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'sinatra'</span></div><div class="line"></div><div class="line">get <span class="string">'/'</span> <span class="keyword">do</span></div><div class="line">  escape_html(<span class="string">"x &gt; y"</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>modular style 使用extension</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'sinatra/base'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> &lt; Sinatra::Base</span></div><div class="line"></div><div class="line">  helpers Sinatra::FormatHelper</div><div class="line"></div><div class="line">  get <span class="string">'/'</span> <span class="keyword">do</span></div><div class="line">    escape_html(<span class="string">"x &gt; y"</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  run!</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这里的<code>helpers</code>其实相当于<code>include</code></p>
<p>dsl型:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'sinatra/base'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Sinatra</span></span></div><div class="line">  <span class="class"><span class="keyword">module</span> <span class="title">Devise</span></span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate!</span></span></div><div class="line">      before &#123;</div><div class="line">        halt <span class="number">403</span>, <span class="string">"You Bastards!"</span></div><div class="line">      &#125;</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  register Devise</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>classic style 使用 dsl extension</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'sinatra'</span></div><div class="line"></div><div class="line">authenticate!</div><div class="line"></div><div class="line">get <span class="string">'/'</span> <span class="keyword">do</span></div><div class="line">  escape_html(<span class="string">"x &gt; y"</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>modular style 使用 dsl extension</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'sinatra/base'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> &lt; Sinatra::Base</span></div><div class="line">  register Sinatra::Devise</div><div class="line"></div><div class="line">  authenticate!</div><div class="line"></div><div class="line">  get <span class="string">'/'</span> <span class="keyword">do</span></div><div class="line">    <span class="string">"hello world"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  run!</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>上面就是两种扩展的用法，我们在深入一点</p>
<p>在<code>Sinatra/main</code>的最后几行可以看到<code>extend Sinatra::Delegator</code>，其实当 <code>require &#39;sinatra&#39;</code>的时候就是执行的上面那行代码，作为整个Sinatra的入口。</p>
<p>看一下<code>Delegator</code>模块,默认的target是<code>Application</code>,也就是<code>helpers</code>和<code>register</code>等Sinatra的一干关键字<code>get post ...</code>等都是通过动态派发给<code>Application</code>类执行的。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Delegator</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">delegate</span><span class="params">(*methods)</span></span></div><div class="line">    methods.each <span class="keyword">do</span> <span class="params">|method_name|</span></div><div class="line">      define_method(method_name) <span class="keyword">do</span> <span class="params">|*args, &amp;block|</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>(*args, &amp;block) <span class="keyword">if</span> respond_to? method_name</div><div class="line">        Delegator.target.send(method_name, *args, &amp;block)</div><div class="line">      <span class="keyword">end</span></div><div class="line">      private method_name</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  delegate <span class="symbol">:get</span>, <span class="symbol">:patch</span>, <span class="symbol">:put</span>, <span class="symbol">:post</span>, <span class="symbol">:delete</span>, <span class="symbol">:head</span>, <span class="symbol">:options</span>, <span class="symbol">:link</span>, <span class="symbol">:unlink</span>,</div><div class="line">           <span class="symbol">:template</span>, <span class="symbol">:layout</span>, <span class="symbol">:before</span>, <span class="symbol">:after</span>, <span class="symbol">:error</span>, <span class="symbol">:not_found</span>, <span class="symbol">:configure</span>,</div><div class="line">           <span class="symbol">:set</span>, <span class="symbol">:mime_type</span>, <span class="symbol">:enable</span>, <span class="symbol">:disable</span>, <span class="symbol">:use</span>, <span class="symbol">:development?</span>, <span class="symbol">:test?</span>,</div><div class="line">           <span class="symbol">:production?</span>, <span class="symbol">:helpers</span>, <span class="symbol">:settings</span>, <span class="symbol">:register</span></div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></div><div class="line">    <span class="keyword">attr_accessor</span> <span class="symbol">:target</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="keyword">self</span>.target = Application</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p><code>Delegator</code>模块功能就是定义派发给<code>Application</code>的函数（不管实现，只是转发）</p>
<p>整个通过<code>Delegator.delegate</code>注册的方法的实现都在<code>Helper</code>这个模块里，在<code>Base</code>类里<code>include</code>各种方法的实现，然后<code>Application</code>在继承<code>Base</code>,有点绕~。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></div><div class="line">  <span class="keyword">include</span> Rack::Utils</div><div class="line">  <span class="keyword">include</span> Helpers</div><div class="line">  <span class="keyword">include</span> Templates</div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>通过一张图理清楚他们的关系</p>
<p><img src="https://l.ruby-china.org/photo/2017/767a092d-c6a4-43df-aee0-c20109525e34.jpeg!large" alt=""></p>
<p>定义自己的关键字，像<code>get post</code>这样。</p>
<p>扩展方法首先在<code>Delegator</code>模块调用<code>delegate</code>方法的时候添加你扩展的关键字名称，类似<code>delegate :get, :patch, ... , :my_fun</code>, 然后在<code>Helper</code>模块里定义<code>my_fun</code>的实现<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Helpers</span></span></div><div class="line">  my_fun</div><div class="line">    p <span class="string">"my_fun"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>这样就可以像关键字一样使用my_fun了，当然也可以通过上面介绍的两个方法进行扩展。</p>
<p>参考  <a href="http://saito.im/note/Sinatra-Extensions/" target="_blank" rel="external">http://saito.im/note/Sinatra-Extensions/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sinatra通过&lt;code&gt;helpers&lt;/code&gt;和&lt;code&gt;register&lt;/code&gt;函数进行扩展&lt;br&gt;首先看一下&lt;code&gt;helpers&lt;/code&gt;函数，用来是来扩展Base类的实例方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Sinatra" scheme="http://yoursite.com/tags/Sinatra/"/>
    
  </entry>
  
</feed>
